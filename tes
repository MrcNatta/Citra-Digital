from tkinter import *
from tkinter import filedialog
from PIL import Image, ImageTk

class CanvasData:
    def __init__(self, main_window):
        self.mainWindow = main_window
        self.image = None
        self.img_tk = None
        self.crop_rectangle = None
        self.start_x = None
        self.start_y = None
        self.end_x = None
        self.end_y = None

def load_image(canvas):
    img_path = filedialog.askopenfilename(title="Load Image")
    if img_path:
        img = Image.open(img_path)
        img.thumbnail((600, 600))
        canvas.data.image = img
        img_tk = ImageTk.PhotoImage(img)
        canvas.data.img_tk = img_tk
        canvas.create_image(0, 0, anchor=NW, image=img_tk)
        canvas.image = img_tk  # keep a reference

def start_crop(event, canvas):
    if canvas.data.image is not None:
        canvas.data.start_x = event.x
        canvas.data.start_y = event.y
        if canvas.data.crop_rectangle:
            canvas.delete(canvas.data.crop_rectangle)
        canvas.data.crop_rectangle = canvas.create_rectangle(event.x, event.y, event.x, event.y, outline='red')

def update_crop(event, canvas):
    if canvas.data.image is not None and canvas.data.crop_rectangle:
        canvas.coords(canvas.data.crop_rectangle, canvas.data.start_x, canvas.data.start_y, event.x, event.y)

def end_crop(event, canvas):
    if canvas.data.image is not None and canvas.data.crop_rectangle:
        canvas.data.end_x = event.x
        canvas.data.end_y = event.y
        perform_crop(canvas)

def perform_crop(canvas):
    if canvas.data.image is not None:
        start_x, start_y = canvas.data.start_x, canvas.data.start_y
        end_x, end_y = canvas.data.end_x, canvas.data.end_y
        if start_x < end_x and start_y < end_y:
            cropped_image = canvas.data.image.crop((start_x, start_y, end_x, end_y))
            canvas.data.image = cropped_image
            img_tk = ImageTk.PhotoImage(cropped_image)
            canvas.data.img_tk = img_tk
            canvas.create_image(0, 0, anchor=NW, image=img_tk)
            canvas.image = img_tk  # keep a reference
            if canvas.data.crop_rectangle:
                canvas.delete(canvas.data.crop_rectangle)

def main():
    root = Tk()
    root.title("Image Cropping Tool")
    
    canvas = Canvas(root, width=600, height=600, bg='white')
    canvas.pack()
    
    canvas.data = CanvasData(root)
    canvas.bind("<ButtonPress-1>", lambda event: start_crop(event, canvas))
    canvas.bind("<B1-Motion>", lambda event: update_crop(event, canvas))
    canvas.bind("<ButtonRelease-1>", lambda event: end_crop(event, canvas))
    
    button_frame = Frame(root)
    button_frame.pack()

    load_button = Button(button_frame, text="Load Image", command=lambda: load_image(canvas))
    load_button.pack(side=LEFT)

    root.mainloop()

if __name__ == "__main__":
    main()
